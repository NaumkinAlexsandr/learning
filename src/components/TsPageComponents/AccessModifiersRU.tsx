import React from "react";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableOneCol from "../../core/TableOneCol.tsx";
import ButtonExampleTwoCol from "../../core/ButtonExampleTwoCol.tsx";
import { accessTs, staticTs, readonlyTsRU } from "./TsConstPre.tsx";

export default function AccessModifiersRU() {
  return (
    <>
      <Table id="ts_access">
        <TableBody>
          <TableOneCol
            text={<h2>Access Modifiers - Модификаторы доступа.</h2>}
          />
          <TableOneCol
            text={
              <p>
                Модификатор доступа – это ключевое слово, используемое с
                свойством или членом класса для управления доступом к нему
                извне. В TypeScript есть три модификатора доступа: public,
                protected и private. По умолчанию все члены класса общедоступны
                – это аналогично использованию с ними модификатора доступа
                public, то есть читать и модифицировать их можно снаружи.
              </p>
            }
          />
          <TableOneCol
            text={
              <p>
                <b>private</b> - ограничивает видимость только одним и тем же
                классом. Когда вы добавляете частный модификатор к свойству или
                методу, вы можете получить доступ к этому свойству или методу в
                том же классе. Любая попытка получить доступ к частным свойствам
                или методам вне класса приведет к ошибке при компиляции.
              </p>
            }
          />
          <TableOneCol
            text={
              <p>
                <b>public</b> - обеспечивает доступ к свойствам и методам класса
                из всех мест. Если вы не укажете модификатор доступа для свойств
                и методов, по умолчанию они будут использовать модификатор
                public.
              </p>
            }
          />
          <TableOneCol
            text={
              <p>
                <b>protected</b> - модификатор protected позволяет свойствам и
                методам класса быть доступными внутри одного класса и внутри
                подклассов. Когда класс (дочерний класс) наследует от другого
                класса (родительского класса), он есть подкласс родительского
                класса.
              </p>
            }
          />
          <ButtonExampleTwoCol
            titleButtonExample={"Пример access"}
            title={
              <>
                <pre>
                  <code>{accessTs}</code>
                </pre>
                <p id="formated-text">
                  <br />
                  Этот код определяет класс Person с тремя свойствами: name ,
                  age и gender. <br /> Свойство name является общедоступным и
                  может быть установлена ​​извне класса. <br /> Свойство age
                  есть частным и может быть установлен извне класса или его
                  наследников. <br /> Свойство gender является защищенным и
                  может быть установленным извне класса, но только в том классе,
                  в котором оно было определено. <br /> Класс также определяет
                  три метода: getName() , getAge() и getGender(). <br /> Метод
                  getName() возвращает значение свойства name. <br /> Метод
                  getAge() возвращает значение свойства age Но поскольку оно
                  есть частным, его нельзя вызвать извне класса. <br /> Метод
                  getGender() возвращает значение свойства gender.
                </p>
              </>
            }
          />
          <TableOneCol
            text={
              <p>
                <b>static</b> - это ключевое слово в TypeScript, которое можно
                использовать для определения свойств и методов в классе, общих
                для всех экземпляров класса, а не для каждого экземпляра.
              </p>
            }
          />
          <ButtonExampleTwoCol
            titleButtonExample={"Приклад static"}
            title={
              <>
                <pre>
                  <code>{staticTs}</code>
                </pre>
                <p id="formated-text">
                  <br />
                  Этот код определяет класс Math , содержащий два статических
                  метода: add и subtract. <br /> Метод add принимает два
                  аргумента типа number и возвращает их сумму. <br /> Метод
                  subtract принимает два аргументы типа number и возвращает
                  разницу между ними. <br /> Затем код вызывает эти методы с
                  аргументами 2 и 3 для метода add и 5 и 3 для метода subtract и
                  выводит результаты в консоль. <br /> Таким образом, этот код
                  демонстрирует, как можно определить класс со статическими
                  методами TypeScript.
                </p>
              </>
            }
          />
          <TableOneCol
            text={
              <p>
                <b>readonly</b> – это ключевое слово в TypeScript, которое можно
                использовать для определения свойств класса. Он используется,
                чтобы сделать свойства только для чтения, то есть их значение
                нельзя изменить после установки.
              </p>
            }
          />
          <ButtonExampleTwoCol
            titleButtonExample={"Приклад readonly"}
            title={
              <>
                <pre>
                  <code>{readonlyTsRU}</code>
                </pre>
                <p id="formated-text">
                  <br />
                  Код определяет класс Person с двумя полями: name и age.
                  <br /> Поле name является public и readonly , потому что он
                  может быть доступным для чтения, но не может быть измененным
                  после установление значения. Поле age public и может быть
                  изменено.
                  <br /> Класс Person также имеет конструктор, устанавливающий
                  значение полей name и age. <br /> Далее, код создает объект
                  person с использованием конструктора класса Person. Объект
                  имеет два поля: name и age, которые можно получить и изменять
                  по с помощью пользователя. <br />
                  Однако если предварительно установить значение поля name ,
                  возникает ошибка, поскольку поле name является readonly.
                  Также, если предварительно установить значение поля age, оно
                  может быть изменено. <br /> Итак, код определяет класс Person
                  с полями и конструктором, который устанавливает значение этих
                  полей. Класс также имеет объект, который можно получить и
                  изменить с помощью пользователя.
                </p>
              </>
            }
          />
        </TableBody>
      </Table>
    </>
  );
}
