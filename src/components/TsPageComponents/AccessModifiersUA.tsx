import React from "react";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableOneCol from "../../core/TableOneCol.tsx";
import ButtonExampleTwoCol from "../../core/ButtonExampleTwoCol.tsx";
import { accessTs, staticTs, readonlyTs } from "./TsConstPre.tsx";

export default function AccessModifiersUA() {
  return (
    <>
      <Table id="ts_access">
        <TableBody>
          <TableOneCol
            text={<h2>Access Modifiers - Модифікатори доступу.</h2>}
          />
          <TableOneCol
            text={
              <p>
                Модифікатор доступу — це ключове слово, яке використовується з
                властивістю або членом класу для керування доступом до нього
                ззовні. У TypeScript є три модифікатори доступу: public,
                protected і private. За замовчуванням усі члени класу
                загальнодоступні — це аналогічно використанню з ними
                модифікатора доступу public, тобто читати та модифікувати їх
                можна ззовні.
              </p>
            }
          />
          <TableOneCol
            text={
              <p>
                <b>private</b> - обмежує видимість лише одним і тим самим
                класом. Коли ви додаєте приватний модифікатор до властивості або
                методу, ви можете отримати доступ до цієї властивості або методу
                в тому ж класі. Будь-яка спроба отримати доступ до приватних
                властивостей або методів поза класом призведе до помилки під час
                компіляції.
              </p>
            }
          />
          <TableOneCol
            text={
              <p>
                <b>public</b> - забезпечує доступ до властивостей та методів
                класу з усіх місць. Якщо ви не вкажете модифікатор доступу для
                властивостей та методів, за замовчуванням вони
                використовуватимуть модифікатор public.
              </p>
            }
          />
          <TableOneCol
            text={
              <p>
                <b>protected</b> - модифікатор protected дозволяє властивостям і
                методам класу бути доступними всередині одного класу і всередині
                підкласів. Коли клас (дочірній клас) успадковує від іншого класу
                (батьківського класу), він є підклас батьківського класу.
              </p>
            }
          />
          <ButtonExampleTwoCol
            titleButtonExample={"Приклад access"}
            title={
              <>
                <pre>
                  <code>{accessTs}</code>
                </pre>
                <p id="formated-text">
                  <br />
                  Цей код визначає клас Person з трьома властивостями: name ,
                  age і gender. <br /> Властивість name є загальнодоступним та
                  може бути встановлено ззовні класу. <br /> Властивість age є
                  приватним і може бути встановлено ззовні класу чи його
                  спадкоємців. <br /> Властивість gender є захищеним і може бути
                  встановленим ззовні класу, але тільки в тому класі, в якому
                  воно було визначено. <br /> Клас також визначає три методи:
                  getName() , getAge() і getGender(). <br /> Метод getName()
                  повертає значення властивості name. <br /> Метод getAge()
                  повертає значення властивості age Але оскільки воно є
                  приватним, його не можна викликати ззовні класу. <br /> Метод
                  getGender() повертає значення властивості gender.
                </p>
              </>
            }
          />
          <TableOneCol
            text={
              <p>
                <b>static</b> - це ключове слово в TypeScript, яке можна
                використовувати для визначення властивостей і методів у класі.
                Він використовується для визначення властивостей і методів,
                спільних для всіх екземплярів класу, а не для кожного
                екземпляра.
              </p>
            }
          />
          <ButtonExampleTwoCol
            titleButtonExample={"Приклад static"}
            title={
              <>
                <pre>
                  <code>{staticTs}</code>
                </pre>
                <p id="formated-text">
                  <br />
                  Цей код визначає клас Math , який містить два статичні методи:
                  add і subtract. <br /> Метод add приймає два аргументи типу
                  number і повертає їхню суму. <br /> Метод subtract приймає два
                  аргументи типу number і повертає різницю між ними. <br />{" "}
                  Потім код викликає ці методи з аргументами 2 і 3 для методу
                  add і 5 і 3 для методу subtract і виводить результати в
                  консоль. <br /> Таким чином, цей код демонструє, як можна
                  визначити клас зі статичними методами TypeScript.
                </p>
              </>
            }
          />
          <TableOneCol
            text={
              <p>
                <b>readonly</b> - це ключове слово в TypeScript, яке можна
                використовувати для визначення властивостей у класі. Він
                використовується, щоб зробити властивості лише для читання,
                тобто їх значення не можна змінити після встановлення.
              </p>
            }
          />
          <ButtonExampleTwoCol
            titleButtonExample={"Приклад readonly"}
            title={
              <>
                <pre>
                  <code>{readonlyTs}</code>
                </pre>
                <p id="formated-text">
                  <br />
                  Код визначає клас Person з двома полями: name та age.
                  <br /> Поле name є public та readonly , тому що він може бути
                  доступним для читання, але не може бути зміненим після
                  встановлення значення. Поле age є public та може бути змінено.
                  <br /> Клас Person також має конструктор, який встановлює
                  значення полів name та age. <br /> Далі, код створює об'єкт
                  person з використанням конструктора класу Person . Об'єкт має
                  два поля: name та age , які можна отримати та змінювати за
                  допомогою користувача. <br />
                  Однак, якщо попередньо встановити значення поля name , виникає
                  помилка, оскільки поле name є readonly. Також, якщо попередньо
                  встановити значення поля age , він може бути змінено. <br />
                  Отже, код визначає клас Person з полями та конструктором, який
                  встановлює значення цих полів. Клас також має об'єкт, який
                  можна отримати та змінювати за допомогою користувача.
                </p>
              </>
            }
          />
        </TableBody>
      </Table>
    </>
  );
}
