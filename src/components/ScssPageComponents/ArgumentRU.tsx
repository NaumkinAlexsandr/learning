import React from "react";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableOneCol from "../../core/TableOneCol.tsx";
import TableTwoEqualCol from "../../core/TableTwoEqualCol.tsx";
import {
  argumentOne,
  argumentTwo,
  argumentThree,
  argumentFour,
  argumentFive,
  argumentSix,
  argumentSeven,
  argumentEight,
  argumentNine,
  argumentTen,
} from "./ScssConstPre.tsx";

export default function ArgumentRU() {
  return (
    <>
      <Table id="scss_argument">
        <TableBody>
          <TableOneCol text={<h3>Аргументы.</h3>} />
          <TableOneCol
            text={
              <p>
                Миксины могут принимать значения SassScript как аргументы,
                которые передаются при подключении миксина и становятся
                доступными как переменные внутри него. <br />
                При определении миксина, аргументы пишутся как имена переменных,
                разделённые запятыми внутри круглых скобок сразу после имени.
                Затем, при подключении миксина, значения могут быть переданы
                аналогичным образом. Например:
              </p>
            }
          />
          <TableTwoEqualCol
            title={
              <p>
                <pre>
                  <code>{argumentOne}</code>
                </pre>
              </p>
            }
            text={
              <p>
                <pre>
                  <code>{argumentTwo}</code>
                </pre>
              </p>
            }
          />
          <TableOneCol
            text={
              <p>
                В миксинах также можно определять значения аргументов по
                умолчанию, используя обычный синтаксис установки значений
                переменных. Затем, при подключении миксина, если ему не будет
                передан аргумент, то будет использовано значение по умолчанию.
              </p>
            }
          />
          <TableTwoEqualCol
            title={
              <p>
                <pre>
                  <code>{argumentThree}</code>
                </pre>
              </p>
            }
            text={
              <p>
                <pre>
                  <code>{argumentFour}</code>
                </pre>
              </p>
            }
          />
          <TableOneCol text={<h3>Именованные аргументы.</h3>} />
          <TableOneCol
            text={
              <p>
                Миксины также можно вызывать используя явно именованные
                аргументы. Например, вышеуказанный пример мог бы быть записан
                как:
              </p>
            }
          />
          <TableOneCol
            text={
              <p>
                <pre>
                  <code>{argumentFive}</code>
                </pre>
              </p>
            }
          />
          <TableOneCol
            text={
              <p>
                Данный способ записи делает код менее кратким, но более
                читабельным. Также он позволяет функциям представлять более
                гибкие интерфейсы: большое количество параметров у функции не
                усложняет её вызов.
                <br />
                Именованные аргументы можно передавать в любом порядке,
                аргументы, имеющие значения по-умолчанию, могут быть пропущены.
                Так как именованные аргументы - это имена переменных, символы
                подчёркивания и дефисы могут быть использованы как
                взаимозаменяемые.
              </p>
            }
          />
          <TableOneCol text={<h3>Переменные в аргументах.</h3>} />
          <TableOneCol
            text={
              <p>
                Иногда имеет смысл миксину или функции принимать неизвестное
                количество аргументов. Например, миксин для создания тени блока
                может принимать любое количество значений тени. Для подобных
                ситуаций Sass поддерживает возможность передачи "переменных
                аргументов" - это такие аргументы, которые передаются последними
                в функцию или миксин, получают все остальные переданные
                параметры и упаковывают их в список. Эти аргументы выглядят как
                обычные, но после них следует многоточие. Например:
              </p>
            }
          />
          <TableTwoEqualCol
            title={
              <p>
                <pre>
                  <code>{argumentSix}</code>
                </pre>
              </p>
            }
            text={
              <p>
                <pre>
                  <code>{argumentSeven}</code>
                </pre>
              </p>
            }
          />
          <TableOneCol
            text={
              <p>
                Переменные аргументы также можно использовать в миксинах.
                Используя тот же синтаксис, можно развернуть список значений
                так, что каждое значение будет передано как отдельный параметр
                или развернуть карту значений так, что каждая пара будет
                трактована как именованный аргумент. Например:
              </p>
            }
          />
          <TableTwoEqualCol
            title={
              <p>
                <pre>
                  <code>{argumentEight}</code>
                </pre>
              </p>
            }
            text={
              <p>
                <pre>
                  <code>{argumentNine}</code>
                </pre>
              </p>
            }
          />
          <TableOneCol
            text={
              <p>
                Вы можете использовать переменные аргументы для того, чтобы
                обернуть миксин и добавить в него дополнительные стили, не меняя
                сигнатуру аргументов этого миксина. Если вы это сделаете, то
                именованные аргументы будут непосредственно переданы в обёрнутый
                миксин:
              </p>
            }
          />
          <TableOneCol
            text={
              <p>
                <pre>
                  <code>{argumentTen}</code>
                </pre>
              </p>
            }
          />
        </TableBody>
      </Table>
    </>
  );
}
